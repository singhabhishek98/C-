#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

int pickingNumbers(vector<int> a) {
    vector<int>result, freq;

    sort(a.begin(), a.end());
    auto it = a.begin();
    int resultSum;
    while(it != a.end())
    {
        if(count(a.begin(), a.end(), *it) == a.size()) // all elemtns are same
            return a.size();

        auto upper = upper_bound(it, a.end(), *it);
        int cnt = count(it, upper, *it);
        freq.push_back(cnt); // saving for future check

        if(abs(*upper - *it) <= 1) {
            int cntB = count(upper, upper_bound(upper, a.end(), *upper), *upper);
            resultSum = cnt + cntB; // set of element and consecutive
            result.push_back(resultSum);
        }
        it = upper;
    }
    
    int max_of_count = *max_element(freq.begin(), freq.end());
    int max_of_sums = *max_element(result.begin(), result.end());
    return max_of_sums > max_of_count ? max_of_sums : max_of_count; // if freq of a element is more than a set
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string a_temp_temp;
    getline(cin, a_temp_temp);

    vector<string> a_temp = split(rtrim(a_temp_temp));

    vector<int> a(n);

    for (int i = 0; i < n; i++) {
        int a_item = stoi(a_temp[i]);

        a[i] = a_item;
    }

    int result = pickingNumbers(a);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}

